name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - .gitignore
      - "*.md"
      - ".github/screenshots/**"
  push:
    paths-ignore:
      - .gitignore
      - "*.md"
      - ".github/screenshots/**"

jobs:
    build-docker:
        runs-on: ubuntu-latest
        strategy:
          fail-fast: false
          matrix:
            include:
              - dockerfile: Dockerfile
                variant: slim
        steps:
          - name: Checkout
            uses: actions/checkout@v3
    
          - name: Docker meta
            id: docker_meta
            uses: docker/metadata-action@v4
            with:
              images: |
                ${{ secrets.DOCKER_USERNAME }}/tanoshi-builder,enable=${{ secrets.DOCKER_USERNAME != '' }}
              tags: |
                type=raw,value=latest,enable=${{ matrix.variant == 'slim' && github.ref_name == github.event.repository.default_branch }}
                type=raw,value=dev,enable=${{ matrix.variant == 'slim' && github.ref_name == 'dev' }}
                type=raw,value=latest,suffix=-${{ matrix.variant }},enable={{ is_default_branch }}
                type=ref,event=branch,suffix=-${{ matrix.variant }}
                type=ref,event=pr,suffix=-${{ matrix.variant }}
                type=semver,pattern={{ version }},suffix=-${{ matrix.variant }}
                type=semver,pattern={{ major }}.{{ minor }},suffix=-${{ matrix.variant }}
                type=sha,suffix=-${{ matrix.variant }}
           
          - name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v2
    
          - name: Append arm64 node to buildx
            id: arm64
            env: 
              SSH_ARM64_HOST: ${{ secrets.SSH_ARM64_HOST }}
              SSH_ARM64_PORT: ${{ secrets.SSH_ARM64_PORT }}
            if: "${{ env.SSH_ARM64_HOST != '' }}"
            run: |
              mkdir -p ~/.ssh
              chmod 700 ~/.ssh
              echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              if [ -z "$SSH_ARM64_PORT" ]; then
                ssh-keyscan ${{ secrets.SSH_ARM64_HOST }} >> ~/.ssh/known_hosts
              else
                ssh-keyscan -p ${{ secrets.SSH_ARM64_PORT }} ${{ secrets.SSH_ARM64_HOST }} >> ~/.ssh/known_hosts
              fi
              chmod 644 ~/.ssh/known_hosts
              
              if [ -z "$SSH_ARM64_PORT" ]; then
                docker context create node-arm64 --docker "host=ssh://${{ secrets.SSH_ARM64_USER }}@${{ secrets.SSH_ARM64_HOST }}"
              else
                docker context create node-arm64 --docker "host=ssh://${{ secrets.SSH_ARM64_USER }}@${{ secrets.SSH_ARM64_HOST }}:${{ secrets.SSH_ARM64_PORT }}"
              fi
              docker buildx create --append --name ${{ steps.buildx.outputs.name }} --platform linux/arm64 node-arm64
    
          - name: Build platforms
            run: |
              # If arm64 was successfully appended, then we build for amd64 and arm64
              if [ -z "$SSH_ARM64_HOST" ]; then
                echo "PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_ENV
              else
                echo "PLATFORMS=linux/amd64" >> $GITHUB_ENV
              fi
    
          - name: Login to DockerHub
            env:
              DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            if: "${{ env.DOCKER_USERNAME != '' }}"
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_TOKEN }}
    
          - name: Build
            id: build
            if: "${{ steps.docker_meta.outputs.tags == '' }}"
            uses: docker/build-push-action@v4
            with:
              context: .
              file: ${{ matrix.dockerfile }}
              platforms: ${{ env.PLATFORMS }}
              push: false
              tags: tanoshi-builder:action
              build-args: |
                BUILD_WEB=false
              cache-from: type=registry,ref=luigi311/tanoshi-builder:buildcache
              cache-to: type=registry,ref=luigi311/tanoshi-builder:buildcache,mode=max
    
          - name: Build Push
            id: build_push
            if: "${{ steps.docker_meta.outputs.tags != '' }}"
            uses: docker/build-push-action@v4
            with:
              context: .
              file: ${{ matrix.dockerfile }}
              platforms: ${{ env.PLATFORMS }}
              push: true
              tags: ${{ steps.docker_meta.outputs.tags }}
              labels: ${{ steps.docker_meta.outputs.labels }}
              build-args: |
                BUILD_WEB=false
              cache-from: type=registry,ref=luigi311/tanoshi-builder:buildcache
              cache-to: type=registry,ref=luigi311/tanoshi-builder:buildcache,mode=max  