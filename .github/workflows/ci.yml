name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - .gitignore
      - "*.md"
      - ".github/screenshots/**"
  push:
    paths-ignore:
      - .gitignore
      - "*.md"
      - ".github/screenshots/**"

jobs:
  build-docker-amd64:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            variant: slim
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        id: docker_login
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta_amd64
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.actor }}/tanoshi-builder
          tags: |
            type=raw,value=latest,enable=${{ matrix.variant == 'slim' && github.ref_name == github.event.repository.default_branch }}
            type=raw,value=dev,enable=${{ matrix.variant == 'slim' && github.ref_name == 'dev' }}
            type=raw,value=latest,suffix=-${{ matrix.variant }},enable={{ is_default_branch }}
            type=ref,event=branch,suffix=-${{ matrix.variant }}
            type=ref,event=pr,suffix=-${{ matrix.variant }}
            type=semver,pattern={{ version }},suffix=-${{ matrix.variant }}
            type=semver,pattern={{ major }}.{{ minor }},suffix=-${{ matrix.variant }}
            type=sha,suffix=-${{ matrix.variant }}

      - name: Build
        if: "${{ steps.docker_login.outcome != 'success' }}"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.docker_meta_amd64.outputs.tags }}
          labels: ${{ steps.docker_meta_amd64.outputs.labels }}
          build-args: |
            BUILD_WEB=false
          cache-from: type=registry,ref=ghcr.io/${{ github.actor }}/tanoshi-builder:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.actor }}/tanoshi-builder:buildcache,mode=max

      - name: Build Push
        if: "${{ steps.docker_login.outcome == 'success' && steps.docker_meta_amd64.outputs.tags != '' }}"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta_amd64.outputs.tags }}
          labels: ${{ steps.docker_meta_amd64.outputs.labels }}
          build-args: |
            BUILD_WEB=false
          cache-from: type=registry,ref=ghcr.io/${{ github.actor }}/tanoshi-builder:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.actor }}/tanoshi-builder:buildcache,mode=max

  build-docker-aarch64:
    permissions: write-all
    runs-on: [self-hosted, arm64]
    if: ${{ github.event_name == 'push' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            variant: slim
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta_aarch64
        env: 
          ARCH: aarch64
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.actor }}/tanoshi-builder
          tags: |
            type=raw,value=latest,suffix=-${{ env.ARCH }},enable=${{ matrix.variant == 'slim' && github.ref_name == github.event.repository.default_branch }}
            type=raw,value=dev,suffix=-${{ env.ARCH }},enable=${{ matrix.variant == 'slim' && github.ref_name == 'dev' }}
            type=raw,value=latest,suffix=-${{ matrix.variant }}-${{ env.ARCH }},enable={{ is_default_branch }}
            type=ref,event=branch,suffix=-${{ matrix.variant }}-${{ env.ARCH }}
            type=ref,event=pr,suffix=-${{ matrix.variant }}-${{ env.ARCH }}
            type=semver,pattern={{ version }},suffix=-${{ matrix.variant }}-${{ env.ARCH }}
            type=semver,pattern={{ major }}.{{ minor }},suffix=-${{ matrix.variant }}-${{ env.ARCH }}
            type=sha,suffix=-${{ matrix.variant }}-${{ env.ARCH }}

      - name: Build Push
        id: build_push
        env:
          ARCH: aarch64
        if: "${{ steps.docker_meta_aarch64.outputs.tags != '' }}"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/aarch64
          push: true
          tags: ${{ steps.docker_meta_aarch64.outputs.tags }}
          labels: ${{ steps.docker_meta_aarch64.outputs.labels }}
          build-args: |
            BUILD_WEB=false
          cache-from: type=registry,ref=ghcr.io/${{ github.actor }}/tanoshi-builder:buildcache-${{ env.ARCH }}
          cache-to: type=registry,ref=ghcr.io/${{ github.actor }}/tanoshi-builder:buildcache-${{ env.ARCH }},mode=max
  
  docker-build-merge:
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs:
      - build-docker-amd64
      - build-docker-aarch64
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Dockerfile
            variant: slim
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.actor }}/tanoshi-builder
          tags: |
            type=raw,value=latest,enable=${{ matrix.variant == 'slim' && github.ref_name == github.event.repository.default_branch }}
            type=raw,value=dev,enable=${{ matrix.variant == 'slim' && github.ref_name == 'dev' }}
            type=raw,value=latest,suffix=-${{ matrix.variant }},enable={{ is_default_branch }}
            type=ref,event=branch,suffix=-${{ matrix.variant }}
            type=ref,event=pr,suffix=-${{ matrix.variant }}
            type=semver,pattern={{ version }},suffix=-${{ matrix.variant }}
            type=semver,pattern={{ major }}.{{ minor }},suffix=-${{ matrix.variant }}
            type=sha,suffix=-${{ matrix.variant }}
  
      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        if: "${{ env.DOCKER_USERNAME != '' }}"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Use the merged tags to create a single manifest tag
      - name: Create Combined Manifest Tag
        id: create_combined_manifest
        env:
          DOCKER_CLI_ACI: "1"
        run: |
          for TAG in $(jq -r '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON"); do
            echo "Creating manifest tag $TAG"
            # Replace ghcr.io/${{ github.actor }} with docker.io/${{ secrets.DOCKER_USERNAME }} if DOCKER_USERNAME is set
            if [ "${{ secrets.DOCKER_USERNAME }}" != "" ]; then
              DOCKERHUB_TAG=$(echo "--tag $TAG" | sed "s/ghcr.io\/${{ github.actor }}/${{ secrets.DOCKER_USERNAME }}/")
            else
              DOCKERHUB_TAG=""
            fi
            
            docker buildx imagetools create --append "${TAG}-aarch64" --tag "${TAG}" ${DOCKERHUB_TAG}
          done
